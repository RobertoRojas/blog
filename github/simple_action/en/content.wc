# Simple action

Github actions are one simple and free way to test your changes and release them automatically. Now, I want to show you how to configure these simple cases:

* Integration of a change
* Build and publish
* Create a release

But, before continue, I will show you the code that I created for this example, is a simple GO application:

<span class='blue_back cyan_font'>main.go</span>
---
package main

import "fmt"

func getMessage() string {
	return "Hello test!"
}

func main() {
	fmt.Println(getMessage())
}
---

<span class='blue_back cyan_font'>main_test.go</span>
---
package main

import "testing"

func TestMessage(t *testing.T) {
	if a := getMessage(); a != "Hello test!" {
		t.Errorf("The value of the function is not valid")
	}
}
---

<span class='blue_back cyan_font'>go.mod</span>
---
module github.com/RobertoRojas/test-publish-artifacts

go 1.18
---

## Integration of a change

To integrate changes the most common way to do it is using a pull request to validate the code and perform unit tests before merge it to a production branch. This is one way to do it:

<span class='blue_back cyan_font'>pull_request.yml</span>
---
name: Pull Request Action

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.18
      - name: Build
        run: go build -o test -v ./...
      - name: Test
        run: go test -v ./...
---

## Build and publish

When you need to get the result of the build, you can use something like this:

<span class='blue_back cyan_font'>publish.yml</span>
---
name: Publish Release Action

on:
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.18
      - name: Build
        run: go build -o test -v ./...
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: Test
          path: ./test
---

## Create a release

Not all the chnages in the main branch must be an offical release, one way to handle this is using the tags to create a release, example:

<span class='blue_back cyan_font'>release.yml</span>
---
name: Create Release Action

on:
  push:
    tags:
      - "v*"
      
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.18
      - name: Build
        run: go build -o executable -v ./...
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./executable
          asset_name: executable
          asset_content_type: application/octet-stream
---

Notice that the upload_url value is the output of the step behind.
